#!/bin/sh

PROGNAME=$(basename $0)

ATCODER_DIR=$(
  cd $(dirname $0)/../atcoder
  pwd
)

function init() {
  if [ $# -eq 0 ]; then
    echo "$PROGNAME: No arguments given"
    exit 1
  fi

  CONTEST=$1
  PROBLEM=$2

  if [ ! -d $ATCODER_DIR/$CONTEST ]; then
    mkdir -p $ATCODER_DIR/$CONTEST

    echo "Info: Directory $ATCODER_DIR/$CONTEST created"
  fi

  PROBLEMS=()

  if [ ! -f $ATCODER_DIR/$CONTEST/$PROBLEM ]; then
    if [ "$PROBLEM" != "" ]; then
      PROBLEMS+=("$PROBLEM")
    else
      PROBLEMS+=("a" "b" "c" "d" "e" "f")
    fi

    for P in ${PROBLEMS[@]}; do
      FILE=$CONTEST/$P.rb
      TARGET=$ATCODER_DIR/$FILE
      if [ -e $TARGET ]; then
        echo "Warn: File $FILE already exists"
        continue
      fi

      cp $ATCODER_DIR/template.rb $TARGET
      echo "Info: File $FILE created"
    done
  fi
}

function test() {
  if [ $# -eq 0 ]; then
    echo "Error: No arguments given"
    exit 1
  fi

  declare -a argv=()

  while (($# > 0)); do
    case $1 in
    -h | --help)
      cat <<EOS
Usage:
  bin/$PROGNAME test CONTEST TASK

Options:
  -h, --help
  -v, --version
EOS
      exit 1
      ;;

    -v | --version)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        echo "$PROGNAME: option requires an argument -- $1" 1>&2
        exit 1
      fi
      RUBY_VERSION=$2
      shift 2
      ;;
    -- | -)
      shift 1
      argv=("${argv[@]}" "$1")
      ;;
    -*)
      echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
      exit 1
      ;;
    *)
      ((++argc))
      argv=("${argv[@]}" "$1")
      shift
      ;;
    esac
  done

  CONTEST=${argv[0]}
  TASK=${argv[1]}

  if [[ -z $CONTEST ]] || [[ -z $TASK ]]; then
    echo "$PROGNAME: too few arguments" 1>&2
    echo "Try '$PROGNAME --help' for more infomation." 1>&2
    exit 1
  fi

  echo "Testing $CONTEST-$TASK ..."

  RBENV_VERSION=${RUBY_VERSION:-"2.7.1"} ruby -v
  case $? in
  0)
    RBENV_VERSION=${RUBY_VERSION:-"2.7.1"} ruby $ATCODER_DIR/$CONTEST/$TASK.rb
    ;;
  1)
    echo "$PROGNAME: invalid version passed -- $RUBY_VERSION" 1>&2
    exit 1
    ;;
  esac
}

function usage() {
  cat <<EOF
Usage:
  bin/$PROGNAME [COMMANDS]

Commands:
  init abc156 [a or b or c or ... or f]
  init agc001
  test abc156 c [-v, --version version_of_ruby]
EOF
}

case "${1}" in
"init") init ${@:2} ;;
"test") test ${@:2} ;;
*) usage ;;
esac
